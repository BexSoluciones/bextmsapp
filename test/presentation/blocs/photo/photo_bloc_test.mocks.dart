// Mocks generated by Mockito 5.4.4 from annotations
// in bexdeliveries/test/presentation/blocs/photo/photo_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bexdeliveries/src/domain/models/photo.dart' as _i6;
import 'package:bexdeliveries/src/domain/repositories/database_repository.dart'
    as _i2;
import 'package:bexdeliveries/src/presentation/providers/photo_provider.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseRepository_0 extends _i1.SmartFake
    implements _i2.DatabaseRepository {
  _FakeDatabaseRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhotoProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoProvider extends _i1.Mock implements _i3.PhotoProvider {
  MockPhotoProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseRepository get databaseRepository => (super.noSuchMethod(
        Invocation.getter(#databaseRepository),
        returnValue: _FakeDatabaseRepository_0(
          this,
          Invocation.getter(#databaseRepository),
        ),
      ) as _i2.DatabaseRepository);

  @override
  _i4.Future<String> getPath() => (super.noSuchMethod(
        Invocation.method(
          #getPath,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getPath,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<_i6.Photo>> loadPhotos() => (super.noSuchMethod(
        Invocation.method(
          #loadPhotos,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Photo>>.value(<_i6.Photo>[]),
      ) as _i4.Future<List<_i6.Photo>>);

  @override
  _i4.Future<int> addPhoto(_i6.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #addPhoto,
          [photo],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deletePhoto(_i6.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [photo],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
