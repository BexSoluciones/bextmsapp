// Mocks generated by Mockito 5.4.4 from annotations
// in bexdeliveries/test/views/camera/camera_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:bexdeliveries/src/domain/repositories/database_repository.dart'
    as _i3;
import 'package:bexdeliveries/src/presentation/blocs/camera/camera_bloc.dart'
    as _i4;
import 'package:bexdeliveries/src/utils/resources/camera.dart' as _i2;
import 'package:bloc/bloc.dart' as _i8;
import 'package:camera/camera.dart' as _i6;
import 'package:image/image.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCameraUtils_0 extends _i1.SmartFake implements _i2.CameraUtils {
  _FakeCameraUtils_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseRepository_1 extends _i1.SmartFake
    implements _i3.DatabaseRepository {
  _FakeDatabaseRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraState_2 extends _i1.SmartFake implements _i4.CameraState {
  _FakeCameraState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImage_3 extends _i1.SmartFake implements _i5.Image {
  _FakeImage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CameraBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraBloc extends _i1.Mock implements _i4.CameraBloc {
  MockCameraBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CameraUtils get cameraUtils => (super.noSuchMethod(
        Invocation.getter(#cameraUtils),
        returnValue: _FakeCameraUtils_0(
          this,
          Invocation.getter(#cameraUtils),
        ),
      ) as _i2.CameraUtils);

  @override
  _i3.DatabaseRepository get databaseRepository => (super.noSuchMethod(
        Invocation.getter(#databaseRepository),
        returnValue: _FakeDatabaseRepository_1(
          this,
          Invocation.getter(#databaseRepository),
        ),
      ) as _i3.DatabaseRepository);

  @override
  _i6.ResolutionPreset get resolutionPreset => (super.noSuchMethod(
        Invocation.getter(#resolutionPreset),
        returnValue: _i6.ResolutionPreset.low,
      ) as _i6.ResolutionPreset);

  @override
  _i6.CameraLensDirection get cameraLensDirection => (super.noSuchMethod(
        Invocation.getter(#cameraLensDirection),
        returnValue: _i6.CameraLensDirection.front,
      ) as _i6.CameraLensDirection);

  @override
  _i4.CameraState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCameraState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.CameraState);

  @override
  _i7.Stream<_i4.CameraState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i4.CameraState>.empty(),
      ) as _i7.Stream<_i4.CameraState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> compressAndSaveImage(String? imagePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #compressAndSaveImage,
          [imagePath],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i5.Image> rotateImage(_i5.Image? image) => (super.noSuchMethod(
        Invocation.method(
          #rotateImage,
          [image],
        ),
        returnValue: _i7.Future<_i5.Image>.value(_FakeImage_3(
          this,
          Invocation.method(
            #rotateImage,
            [image],
          ),
        )),
      ) as _i7.Future<_i5.Image>);

  @override
  _i7.Future<int> countImagesInCache() => (super.noSuchMethod(
        Invocation.method(
          #countImagesInCache,
          [],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void add(_i4.CameraEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i4.CameraEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.CameraState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i4.CameraEvent>(
    _i8.EventHandler<E, _i4.CameraState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i8.Transition<_i4.CameraEvent, _i4.CameraState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i8.Change<_i4.CameraState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
